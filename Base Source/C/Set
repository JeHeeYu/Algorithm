#include <stdio.h>
#include <stdlib.h>

typedef struct {
	int capacity;
	int size;
	int* buf;
} Set;

int Initialize(Set *s, int size);
int IsMember(const Set* s, int data);
void Add(Set* s, int data);
void Print(Set* s);
void UnInitialize(Set *s);
void Remove(Set* s, int data);
int Capacity(const Set* s);
int Size(const Set* s);
int Assign(Set* s1, const Set* s2);
int Equal(const Set* s1, const Set* s2);
Set* Union(Set* s1, const Set* s2, const Set* s3);
Set* InterSection(Set* s1, const Set* s2, const Set* s3);
Set* Difference(Set* s1, const Set* s2, const Set* s3);

int main()
{
	Set A, B, C;
	Initialize(&A, 10);
	Initialize(&B, 10);
	Initialize(&C, 10);

	Add(&A, 1);
	Add(&A, 3);
	Add(&A, 5);

	Add(&B, 1);
	Add(&B, 4);
	Add(&B, 6);

	Difference(&C, &A, &B);
	Print(&A);
	Print(&B);
	Print(&C);

	UnInitialize(&A);
	UnInitialize(&B);
	UnInitialize(&C);
	return 0;
}

int Initialize(Set* s, int capacity)
{
	s->capacity = capacity;
	s->size = 0;

	s->buf = (int*)malloc(sizeof(int) * capacity);
}

int IsMember(const Set* s, int data)
{
	int i;
	for (i = 0; i < s->size; i++)
		if (data == s->buf[i])
			return i;
	return -1;
}

void Add(Set* s, int data)
{
	if (IsMember(s, data) != -1)
		return;

	if(s->size < s->capacity )
		s->buf[s->size++] = data;
}

void Remove(Set* s, int data)
{
	int index;
	if ((index = IsMember(s, data)) != -1)
		s->buf[index] = s->buf[--s->size];
}


void Print(Set* s)
{
	int i;
	printf("size : %d", s->size);
	printf(",   { ");
	for (i = 0; i < s->size; i++)
		printf("%d ", s->buf[i]);
	printf("}\n");

}

int Capacity(const Set* s)
{
	return s->capacity;
}

int Size(const Set* s)
{
	return s->size;
}

int Assign(Set* s1, const Set* s2)
{
	int i;
	int max = s1->capacity < s2->size ? s1->capacity : s2->size;
	for (i = 0; i < s2->size; i++)
		s1->buf[i] = s2->buf[i];
	s1->size = max;
}

int Equal(const Set* s1, const Set* s2)
{
	int i, j;
	for (i = 0; i < s1->size; i++)
	{
		for (j = 0; j < s2->size; j++)
			if (s1->buf[i] == s2->buf[j])
				break;
		if (j == s2->size)
			return 0;
	}
	return 1;
}

Set* Union(Set* s1, const Set* s2, const Set* s3)
{
	int i;
	Assign(s1, s2);
	for (i = 0; i < s3->size; i++)
		Add(s1, s3->buf[i]);

	return s1;
}

Set* InterSection(Set* s1, const Set* s2, const Set* s3)
{
	int i, j;
	s1->size = 0;

	for (i = 0; i < s2->size; i++)
	{
		for (j = 0; j < s3->size; j++)
		{
			if (s2->buf[i] == s3->buf[j])
				Add(s1, s2->buf[i]);
		}
	}
	return s1;
}

Set* Difference(Set* s1, const Set* s2, const Set* s3)
{
	int i, j;
	s1->size = 0;
	for (i = 0; i < s2->size; i++)
	{
		for (j = 0; j < s3->size; j++)
		{
			if (s2->buf[i] == s3->buf[j])
				break;
		}
		if (j == s3->size)
			Add(s1, s2->buf[i]);
	}
	return s1;
}		


void UnInitialize(Set* s)
{
	free(s->buf);
	s->capacity = s->size = 0;
}
